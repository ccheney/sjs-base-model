{"version":3,"file":"index.js","sources":["../src/Util.ts","../src/BaseObject.ts","../src/BaseModel.ts"],"sourcesContent":["/**\n * A Utility class that has several static methods to assist in development.\n *\n * @class Util\n * @author Robert S. (www.codeBelt.com)\n * @static\n */\nexport class Util {\n\n    /**\n     * Keeps track of the count for the uniqueId method.\n     *\n     * @property _idCounter\n     * @type {int}\n     * @private\n     * @static\n     */\n    private static _idCounter: number = 0;\n\n    /**\n     * Generates a unique ID. If a prefix is passed in, the value will be appended to it.\n     *\n     * @method uniqueId\n     * @param [prefix] {string} The string value used for the prefix.\n     * @returns {init|string} Returns the unique identifier.\n     * @public\n     * @static\n     * @example\n     *      let property = Util.uniqueId();\n     *      // 1\n     *\n     *      let property = Util.uniqueId('prefixName_');\n     *      // prefixName_1\n     */\n    public static uniqueId(prefix: string = null): any {\n        const id: number = ++Util._idCounter;\n\n        if (prefix != null) {\n            return String(prefix + id);\n        } else {\n            return id;\n        }\n    }\n\n    /**\n     * Removes a list of properties from an object.\n     *\n     * @method deletePropertyFromObject\n     * @param object {Object} The object you want to remove properties from.\n     * @param value {string|Array.<string>} A property name or an array of property names you want to remove from the object.\n     * @returns {any} Returns the object passed in without the removed the properties.\n     * @public\n     * @static\n     * @example\n     *      let obj = { name: 'Robert', gender: 'male', phone: '555-555-5555' }\n     *\n     *      Util.deletePropertyFromObject(obj, ['phone', 'gender']);\n     *\n     *      // { name: 'Robert' }\n     */\n    public static deletePropertyFromObject(object: any, value: string | string[]): any {\n        // If properties is not an array then make it an array object.\n        const propertyNameList: any = (value instanceof Array) ? value : [value];\n\n        Object\n            .keys(object)\n            .forEach((key: string) => {\n                const propertyData: any = object[key];\n\n                if (propertyNameList.includes(key) === true) {\n                    delete object[key];\n                } else if (propertyData instanceof Array) {\n                    propertyData.forEach((item: any) => Util.deletePropertyFromObject(item, propertyNameList));\n                } else if (propertyData instanceof Object) {\n                    Util.deletePropertyFromObject(propertyData, propertyNameList);\n                }\n            });\n\n        return object;\n    }\n\n    /**\n     * Makes a clone of an object.\n     *\n     * @method clone\n     * @param obj {Object} The object you to clone.\n     * @returns {any} Returns a clone object of the one passed in.\n     * @public\n     * @static\n     * @example\n     *      let cloneOfObject = Util.clone(obj);\n     */\n    public static clone(obj: any): any {\n\n        // other scripts: http://davidwalsh.name/javascript-clone\n        // http://oranlooney.com/functional-javascript/\n        // http://oranlooney.com/deep-copy-javascript/\n\n        // Handle the 3 simple types, and null or undefined\n        if (obj == null || typeof obj !== 'object') {\n            return obj;\n        }\n\n        // Handle Date\n        if (obj instanceof Date) {\n            const date: Date = new Date();\n\n            date.setTime(obj.getTime());\n\n            return date;\n        }\n\n        // Handle Array\n        if (obj instanceof Array) {\n            const array: any[] = [];\n            const length: number = obj.length;\n\n            for (let i = 0; i < length; i++) {\n                array[i] = Util.clone(obj[i]);\n            }\n\n            return array;\n        }\n\n        // Handle Object\n        if (obj instanceof Object) {\n            const copy: any = {};\n\n            for (const attr in obj) {\n                if (obj.hasOwnProperty(attr)) {\n                    copy[attr] = Util.clone(obj[attr]);\n                }\n            }\n\n            return copy;\n        }\n\n        throw new Error(`[Util] Unable to clone type ${typeof obj}.`);\n    }\n\n}\n","import {Util} from './Util';\n\n/**\n * The {{#crossLink \"BaseObject\"}}{{/crossLink}} class is an abstract class that provides common properties and functionality for all StructureJS classes.\n *\n * @class BaseObject\n * @requires Util\n * @constructor\n * @author Robert S. (www.codeBelt.com)\n */\nexport class BaseObject {\n\n    /**\n     * The sjsId (StructureJS ID) is a unique identifier automatically assigned to most StructureJS objects upon instantiation.\n     *\n     * @property sjsId\n     * @type {int}\n     * @default null\n     * @writeOnce\n     * @readOnly\n     * @public\n     */\n    public sjsId: number = null;\n\n    constructor() {\n        this.sjsId = Util.uniqueId();\n    }\n\n    /**\n     * The purpose of the destroy method is to make an object ready for garbage collection. This\n     * should be thought of as a one way function. Once destroy is called no further methods should be\n     * called on the object or properties accessed. It is the responsibility of those who implement this\n     * function to stop all running Timers, all running Sounds, and take any other steps necessary to make an\n     * object eligible for garbage collection.\n     *\n     * By default the destroy method will null out all properties of the class automatically. You should call destroy\n     * on other objects before calling the super.\n     *\n     * @method destroy\n     * @return {void}\n     * @public\n     * @example\n     *     destroy() {\n     *          this.disable();\n     *\n     *          this._childInstance.destroy();\n     *\n     *          super.destroy();\n     *     }\n     */\n    public destroy(): void {\n        for (const key in this) {\n            if (this.hasOwnProperty(key) && key !== 'sjsId') {\n                this[key] = null;\n            }\n        }\n    }\n\n}\n","import {IBaseModel} from './IBaseModel';\nimport {IBaseModelOptions} from './IBaseModelOptions';\nimport {BaseObject} from './BaseObject';\nimport {Util} from './Util';\n\n/**\n *  Base Model is a design pattern used to transfer data between software application subsystems.\n *\n * Note: If the data doesn't match the property names you can set the value manually after update super method has been called.\n *  Also in the class you inherit BaseModel from you can override the update method to handle the data how you want.\n *\n * @class BaseModel\n * @extends BaseObject\n * @param [data] {any} Provide a way to update the base model upon initialization.\n * @param [opts] {{ expand:boolean }} Options for the base model.\n * @requires Extend\n * @requires BaseObject\n * @requires Util\n * @constructor\n * @author Robert S. (www.codeBelt.com)\n * @example\n *      // Example how to extend the BaseModel class.\n *      let data = {\n *              make: 'Tesla',\n *              model: 'Model S',\n *              YeAr: 2014,\n *              feature: {\n *                  abs: true,\n *                  airbags: true\n *              }\n *      }\n *      let carModel = new CarModel(data);\n *\n *\n *      // Example how to extend the BaseModel class.\n *      class CarModel extends BaseModel {\n *\n *          // You need to have properties so the data will get assigned.\n *          // If not the data will not get assigned to the model.\n *          make = null;\n *          model = null;\n *          year = null;\n *          allWheel = false; // Set a default value\n *\n *          // You can assign BaseModel to a property which will\n *          // automatically created it and pass the data to it.\n *          feature = FeatureModel\n *\n *          // If you have an array of data and want them assign to a BaseModel.\n *          feature = [FeatureModel];\n *\n *          constructor(data = {}, opts = {}) {\n *              super(opts);\n *\n *              if (data) {\n *                  this.update(data);\n *              }\n *          }\n *\n *          // @overridden BaseModel.update\n *          update(data) {\n *              super.update(data);\n *\n *              // If the data doesn't match the property name.\n *              // You can set the value(s) manually after the update super method has been called.\n *              this.year = data.YeAr;\n *          }\n *      }\n */\nexport class BaseModel extends BaseObject implements IBaseModel {\n    /**\n     * This property helps distinguish a BaseModel from other functions.\n     *\n     * @property IS_BASE_MODEL\n     * @type {boolean}\n     * @public\n     * @static\n     * @readonly\n     */\n    public static readonly IS_BASE_MODEL: boolean = true;\n\n    /**\n     * @property sjsOptions\n     * @type {IBaseModelOptions}}\n     * @public\n     */\n    protected sjsOptions: IBaseModelOptions = {\n        expand: false,\n    };\n\n    constructor(opts: IBaseModelOptions = {}) {\n        super();\n\n        this.sjsOptions.expand = opts.expand === true;\n    }\n\n    /**\n     * Provide a way to update the  Base Model.\n     *\n     * @method update\n     * @param [data={}] {any}\n     * @public\n     * @example\n     *     // Example of updating some of the data:\n     *     carModel.update({ year: 2015, allWheel: true});\n     *\n     *     // Of course you can also do it the following way:\n     *     carModel.year = 2015;\n     *     carModel.allWheel = false;\n     */\n    public update(data: any = {}): any {\n        Object\n            .keys(this)\n            .forEach((propertyName: string) => {\n                // Ignore the sjsId property because it is set in the BaseObject constructor and we don't want to update it.\n                if (propertyName !== 'sjsId') {\n                    const propertyData = this[propertyName];\n                    const updateData = data[propertyName];\n                    const dataToUse = (updateData !== void 0) ? updateData : propertyData;\n\n                    this._updatePropertyWithDataPassedIn(propertyName, dataToUse);\n                }\n            });\n\n        return this;\n    }\n\n    /**\n     * Converts the Base Model data into a JSON object and deletes the sjsId property.\n     *\n     * @method toJSON\n     * @returns {any}\n     * @public\n     * @example\n     *     const obj = carModel.toJSON();\n     */\n    public toJSON(): any {\n        const clone: any = Util.clone(this);\n\n        return Util.deletePropertyFromObject(clone, ['sjsId', 'sjsOptions']);\n    }\n\n    /**\n     * Converts a  Base Model to a JSON string,\n     *\n     * @method toJSONString\n     * @returns {string}\n     * @public\n     * @example\n     *     const str = carModel.toJSONString();\n     */\n    public toJSONString(): string {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * Converts the string json data into an Object and calls the {{#crossLink \"BaseModel/update:method\"}}{{/crossLink}} method with the converted Object.\n     *\n     * @method fromJSON\n     * @param json {string}\n     * @public\n     * @example\n     *      const str = '{\"make\":\"Tesla\",\"model\":\"Model S\",\"year\":2014}'\n     *      const carModel = new CarModel();\n     *      carModel.fromJSON(str);\n     */\n    public fromJSON(json: string): any {\n        const parsedData: any = JSON.parse(json);\n\n        this.update(parsedData);\n\n        return this;\n    }\n\n    /**\n     * Create a clone/copy of the  Base Model.\n     *\n     * @method clone\n     * @returns {BaseModel}\n     * @public\n     * @example\n     *     const clone = carModel.clone();\n     */\n    public clone(): BaseModel {\n        const clonedBaseModel: BaseModel = new (this as any).constructor(this);\n\n        return clonedBaseModel;\n    }\n\n    /**\n     * Adds the updateData to the property\n     *\n     * @method _updatePropertyWithDataPassedIn\n     * @param propertyName\n     * @param updateData\n     * @protected\n     */\n    protected _updatePropertyWithDataPassedIn(propertyName: any, updateData: any): void {\n        // If the current property on the model is an array and the updateData is an array.\n        if ((this[propertyName] instanceof Array === true) && (updateData instanceof Array === true)) {\n            const isPropertyDataValueAnUninstantiatedBaseModel = (typeof this[propertyName][0] === 'function' && this[propertyName][0].IS_BASE_MODEL === true);\n            const isUpdateDataValueAnUninstantiatedBaseModel = (typeof updateData[0] === 'function' && updateData[0].IS_BASE_MODEL === true);\n\n            if (isPropertyDataValueAnUninstantiatedBaseModel === false) {\n                this[propertyName] = updateData.map((data) => this._updateData(null, data));\n            } else if (isPropertyDataValueAnUninstantiatedBaseModel === true && isUpdateDataValueAnUninstantiatedBaseModel === false) {\n                // If the property data is an uninstantiated BaseModel then we assume the update data passed in\n                // needs to be create as that BaseModel Class.\n                const baseModel = this[propertyName][0];\n                this[propertyName] = updateData.map((data) => this._updateData(baseModel, data));\n            } else {\n                this[propertyName] = [];\n            }\n        } else {\n            this[propertyName] = this._updateData(this[propertyName], updateData);\n        }\n    }\n\n    /**\n     * @method _updateData\n     * @param propertyData\n     * @param updateData\n     * @protected\n     */\n    protected _updateData(propertyData: any, updateData: any): any {\n        let returnData: any = null;\n\n        if (this.sjsOptions.expand === false && typeof updateData === 'function' && updateData.IS_BASE_MODEL === true) {\n            // If updateData is a function and has an IS_BASE_MODEL static property then it must be a child model and we need to return null\n            // so it cleans up the BaseModel functions on the property.\n            // To create empty model(s) pass { expand: true } for the options.\n            return null;\n        }\n\n        if (typeof propertyData === 'function' && propertyData.IS_BASE_MODEL === true && updateData) {\n            // If the propertyData is an instance of a BaseModel class and has not been created yet.\n            // Instantiate it and pass in the updateData to the constructor.\n            returnData = new propertyData(updateData, this.sjsOptions);\n        } else if ((propertyData instanceof BaseModel) === true) {\n            // If propertyData is an instance of a BaseModel class and has already been created.\n            // Call the update method and pass in the updateData.\n            propertyData.update(updateData);\n            returnData = propertyData;\n        } else {\n            // Else just return the updateData to the property.\n            returnData = updateData;\n        }\n\n        return returnData;\n    }\n\n}\n"],"names":["Util","prefix","id","_idCounter","String","object","value","propertyNameList","Array","Object","keys","forEach","key","propertyData","includes","item","deletePropertyFromObject","obj","Date","date","setTime","getTime","array","length_1","length","i","clone","copy","attr","hasOwnProperty","Error","this","sjsId","uniqueId","BaseObject","opts","_super","_this","expand","sjsOptions","tslib_1.__extends","BaseModel","data","propertyName","updateData","dataToUse","_updatePropertyWithDataPassedIn","JSON","stringify","toJSON","json","parsedData","parse","update","constructor","isPropertyDataValueAnUninstantiatedBaseModel","IS_BASE_MODEL","isUpdateDataValueAnUninstantiatedBaseModel","map","_updateData","baseModel_1","returnData"],"mappings":"2YAOA,cAqIA,OA1GkBA,WAAd,SAAuBC,gBAAAA,QACnB,IAAMC,IAAeF,EAAKG,WAE1B,OAAc,MAAVF,EACOG,OAAOH,EAASC,GAEhBA,GAoBDF,2BAAd,SAAuCK,EAAaC,GAEhD,IAAMC,EAAyBD,aAAiBE,MAASF,GAASA,GAgBlE,OAdAG,OACKC,KAAKL,GACLM,QAAQ,SAACC,GACN,IAAMC,EAAoBR,EAAOO,IAEM,IAAnCL,EAAiBO,SAASF,UACnBP,EAAOO,GACPC,aAAwBL,MAC/BK,EAAaF,QAAQ,SAACI,GAAc,OAAAf,EAAKgB,yBAAyBD,EAAMR,KACjEM,aAAwBJ,QAC/BT,EAAKgB,yBAAyBH,EAAcN,KAIjDF,GAcGL,QAAd,SAAoBiB,GAOhB,GAAW,MAAPA,GAA8B,iBAARA,EACtB,OAAOA,EAIX,GAAIA,aAAeC,KAAM,CACrB,IAAMC,EAAa,IAAID,KAIvB,OAFAC,EAAKC,QAAQH,EAAII,WAEVF,EAIX,GAAIF,aAAeT,MAAO,CAItB,IAAK,IAHCc,KACAC,EAAiBN,EAAIO,OAElBC,EAAI,EAAGA,EAAIF,EAAQE,IACxBH,EAAMG,GAAKzB,EAAK0B,MAAMT,EAAIQ,IAG9B,OAAOH,EAIX,GAAIL,aAAeR,OAAQ,CACvB,IAAMkB,KAEN,IAAK,IAAMC,KAAQX,EACXA,EAAIY,eAAeD,KACnBD,EAAKC,GAAQ5B,EAAK0B,MAAMT,EAAIW,KAIpC,OAAOD,EAGX,MAAM,IAAIG,MAAM,sCAAsCb,QAxH3CjB,aAAqB,6BCOpC,aAFO+B,WAAgB,KAGnBA,KAAKC,MAAQhC,KAAKiC,WAiC1B,OARWC,oBAAP,WACI,IAAK,IAAMtB,KAAOmB,KACVA,KAAKF,eAAejB,IAAgB,UAARA,IAC5BmB,KAAKnB,GAAO,kCCqCxB,WAAYuB,gBAAAA,MAAZ,MACIC,0BALMC,cACNC,QAAQ,GAMRD,EAAKE,WAAWD,QAAyB,IAAhBH,EAAKG,SA8JtC,OAtL+BE,eAyCpBC,mBAAP,SAAcC,GAAd,WAcI,oBAdUA,MACVjC,OACKC,KAAKqB,MACLpB,QAAQ,SAACgC,GAEN,GAAqB,UAAjBA,EAA0B,CAC1B,IAAM9B,EAAewB,EAAKM,GACpBC,EAAaF,EAAKC,GAClBE,OAA4B,IAAfD,EAAyBA,EAAa/B,EAEzDwB,EAAKS,gCAAgCH,EAAcE,MAIxDd,MAYJU,mBAAP,WACI,IAAMf,EAAa1B,KAAK0B,MAAMK,MAE9B,OAAO/B,KAAKgB,yBAAyBU,GAAQ,QAAS,gBAYnDe,yBAAP,WACI,OAAOM,KAAKC,UAAUjB,KAAKkB,WAcxBR,qBAAP,SAAgBS,GACZ,IAAMC,EAAkBJ,KAAKK,MAAMF,GAInC,OAFAnB,KAAKsB,OAAOF,GAELpB,MAYJU,kBAAP,WAGI,OAFmC,IAAKV,KAAauB,YAAYvB,OAa3DU,4CAAV,SAA0CE,EAAmBC,GAA7D,WAEI,GAAKb,KAAKY,aAAyBnC,QAAU,GAAUoC,aAAsBpC,QAAU,EAAO,CAC1F,IAAM+C,EAAiF,mBAA1BxB,KAAKY,GAAc,KAA6D,IAAxCZ,KAAKY,GAAc,GAAGa,cACrHC,EAAuE,mBAAlBb,EAAW,KAAqD,IAAhCA,EAAW,GAAGY,cAEzG,IAAqD,IAAjDD,EACAxB,KAAKY,GAAgBC,EAAWc,IAAI,SAAChB,GAAS,OAAAL,EAAKsB,YAAY,KAAMjB,UAClE,IAAqD,IAAjDa,IAAwG,IAA/CE,EAAsD,CAGtH,IAAMG,EAAY7B,KAAKY,GAAc,GACrCZ,KAAKY,GAAgBC,EAAWc,IAAI,SAAChB,GAAS,OAAAL,EAAKsB,YAAYC,EAAWlB,UAE1EX,KAAKY,WAGTZ,KAAKY,GAAgBZ,KAAK4B,YAAY5B,KAAKY,GAAeC,IAUxDH,wBAAV,SAAsB5B,EAAmB+B,GACrC,IAAIiB,EAAkB,KAEtB,OAA+B,IAA3B9B,KAAKQ,WAAWD,QAA0C,mBAAfM,IAA0D,IAA7BA,EAAWY,cAI5E,MAGiB,mBAAjB3C,IAA8D,IAA/BA,EAAa2C,eAA0BZ,EAG7EiB,EAAa,IAAIhD,EAAa+B,EAAYb,KAAKQ,YACvC1B,aAAwB4B,IAAe,GAG/C5B,EAAawC,OAAOT,GACpBiB,EAAahD,GAGbgD,EAAajB,EAGViB,IAzKYpB,iBAAyB,KAVrBP"}